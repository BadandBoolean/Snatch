generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Salon {
  id               String        @id @default(cuid())
  name             String
  phone            String        @default("")
  address          String        @default("no website")
  ownerId          String        @unique
  bookingInfo      String        @default("Please call us to book an appointment")
  bookingOptions   String[]      @default(["Phone", "website", "Walk-in"])
  phoneSubsDev     String[]
  phoneSubsProd    String[]
  emailSubsDev     String[]
  emailSubsProd    String[]
  calendarUrl      String        @default("")
  curriCalApptIds  String[]      @default([])
  realSalonId      String?
  acceptNewClients Boolean       @default(true)
  allowWalkIns     Boolean       @default(true)
  email            String        @default("")
  hasRealSalon     Boolean       @default(false)
  servicetype      String?
  appointments     Appointment[]
  owner            User          @relation(fields: [ownerId], references: [id])
  realSalon        RealSalon?    @relation(fields: [realSalonId], references: [id])
}

model RealSalon {
  id              String        @id @default(cuid())
  salonname       String        @default("")
  physicalAddress String        @default("")
  emailAddress    String        @default("")
  phoneNumber     String        @default("")
  appointments    Appointment[]
  stylists        Salon[]
}

model CurrentiCalAppointment {
  iCalApptId String   @id
  duration   Int
  startTime  DateTime @db.Timestamp(6)
  providerId String
}

model Appointment {
  id           String     @id @default(cuid())
  salonId      String?
  date         DateTime
  time         DateTime
  price        String
  isAvailable  Boolean    @default(true)
  notes        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  salonname    String     @default("Salon Name")
  location     String     @default("")
  zipcode      String     @default("")
  bookingLink  String?
  bookingPhone String?
  duration     Int?
  icalApptId   String?
  realSalonId  String?
  realSalon    RealSalon? @relation(fields: [realSalonId], references: [id])
  salon        Salon?     @relation(fields: [salonId], references: [id])
  servicetype  String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hasSalon      Boolean   @default(false)
  accounts      Account[]
  salon         Salon?
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RegisteredPartners {
  id           String @id @default(cuid())
  partnername  String
  partneremail String
}

model AllSalonsPhoneNums {
  subscriberid String @id @default(cuid())
  phonenum     String
}

model AllProvidersPhoneDev {
  subscriberid String @id
  phonenum     String
}

model LandingPageSignUpEmails {
  subscriberid String @id @default(cuid())
  email        String
  name         String
  businessname String
}
