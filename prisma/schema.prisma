// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// prisma schema:
// whenever yo update this run: prisma migrate dev and will regenerate the prisma client
// might also need to run prisma generate to update the prisma client

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Salon {
  id             String        @id @default(cuid()) // primary key referenced by foreign key in appointment model
  owner          User          @relation(fields: [ownerId], references: [id]) // references the id of the user model
  ownerId        String        @unique // scalar field which is foreign key of salon model. does not exist in the database
  name           String
  phone          String // for now
  address        String        @default("no website") // WEB ADDRESS
  bookingInfo    String        @default("Please call us to book an appointment")
  bookingOptions String[]      @default(["Phone", "website", "Walk-in"])
  appointments   Appointment[] // this is a relation field which does not exist in the database 
  stylists       Stylist[] // this is a relation field which does not exist in the database     
  services       Service[] // this is a relation field which does not exist in the database    
  phoneSubsDev   String[]
  phoneSubsProd  String[]
  emailSubsDev   String[]
  emailSubsProd  String[]
}

model Stylist {
  id        String @id @default(cuid())
  salon     Salon  @relation(fields: [salonId], references: [id]) // references the id of the salon model
  salonname String @default("Salon Name") // this is assigned in the fron, helps us with some of the table config
  salonId   String // scalar field which is foreign key of stylist model. does not exist in the database
  name      String
}

// salon that you are associated with? // make a new field?
// Roadster: big name or very popular master stylists who are booked up very frequently. 
// these stylists are not necessarily attached to any salon in particular they are their own provider. 
// provider is Stylist actually! but there is a many to one relationship between them. 
// ideal:
// is there a way we can keep the old model and also have the new one? 
// how we would design it from scratch:

// A provider can be a salon or a stylist. Ideally it is a stylist and a master stylist at that. 
model Provider {
  id            String   @id @default(cuid())
  firstname     String
  lastname      String
  salonname     String   @default("Salon Name") // this is assigned in the fron, helps us with some of the table config
  phonenumber   String
  bookingLink   String
  website       String
  physAddress   String
  phoneSubsdev  String[]
  phoneSubsprod String[]
}

model Service {
  id        String @id @default(cuid())
  salon     Salon  @relation(fields: [salonId], references: [id]) // references the id of the salon model
  salonname String @default("Salon Name") // this is assigned in the fron, helps us with some of the table config
  salonId   String // scalar field which is foreign key of service model. does not exist in the database
  name      String
}

model Appointment {
  id           String   @id @default(cuid())
  salon        Salon?   @relation(fields: [salonId], references: [id]) // references the id of the salon model
  salonname    String   @default("Salon Name") // this is assigned in the fron, helps us with some of the table config, also used by admin to make appointment
  salonId      String? // scalar field which is foreign key of appointment model. does not exist in the database. OPTIONAL
  date         DateTime // date of appt .... might want to store as just the date @db.Date
  time         DateTime // time of appt ... might want to store as just the time. @db.Time(x) where x is the precision??? is it?
  whoWith      String // TODO: map to user i.e salon owner UNLESS it is done by not the salon owner
  service      String
  price        String
  isAvailable  Boolean  @default(true)
  location     String   @default("") // PHYSICAL ADDRESS. can be mapped to salon address maybe later. 
  zipcode      String   @default("") // ZIPCODE ... maybe won't be used
  notes        String
  bookingLink  String? // WEB ADDRESS only for admin input
  bookingPhone String? // PHONE NUMBER only for admin input
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// -------- AUTH -------------- //

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hasSalon      Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  salon         Salon?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RegisteredPartners {
  id           String @id @default(cuid())
  partnername  String
  partneremail String
}

model phoneSubMainList {
  subscriberid String   @id @default(cuid()) // subscriber id I guess
  phonenum     String
  salonid      String[] @default([]) // salon that they have subbed to, if any? array so this can be multiple salons
}
